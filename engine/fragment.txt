#version 330 core

#define MAX 100
uniform vec3 scale;

uniform vec3 colors[MAX];

uniform float size_of_array;

in vec3 pos;
in vec3 norm;

out vec3 color;

uniform vec3 lightColor = vec3(1, 0, 0);
float lightIntensity = 1.0;
uniform vec3 lightPos = vec3(0, 100, 0);

vec3 Gradient(float position, vec3 array[MAX], float yscale, float size){
	if(int(size) == 1){
	return array[0];
	}
	
	for(int i = 0; i < size-1; i++)
	{
		if(position> yscale*(int(size)-1-i)/int(size))
		{
			float mPct = smoothstep(yscale*(int(size)-i)/int(size),yscale*(int(size)-1-i)/int(size), position);
			return mix(array[i],array[i+1],mPct);	
		}
	}
	
	return array[int(size)-1];
}

void main(){
	// Calculate diffuse lightning
	vec3 _norm = normalize(norm);
	vec3 lightDir = normalize(lightPos - pos);
	float diff = max(dot(_norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	vec3 ambient = vec3(1,1,1)*0.5f;
	vec3 objectColor = vec3(1, 1, 1);

	// Get the gradient color
	vec3 gradient_color = Gradient(pos.y,colors, scale.y, size_of_array);

	color = (diffuse + ambient) * gradient_color;
}
